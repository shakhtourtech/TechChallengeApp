name: 'Create Infra with Terraform'

on:
  push:
    branches: [ master ]
    paths: 
      - '.github/workflows/terraform-iac.yml'
      - 'solution/terraform/**.tf'
  workflow_dispatch:
  
env:
  STORAGE_ACCOUNT_NAME: stserviantfstate001
  RESOURCE_GROUP_NAME: rg-github
  RESOURCE_GROUP_LOCATION: westeurope
  CONTAINER_NAME: tfstate
  BLOB_NAME: terraform.tfstate
  WORKING_DIRECTORY: solution/terraform
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_db_user: ${{ secrets.DB_USER }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  
jobs:
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
                
    - name: Login to Azure with Service Principal
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Terraform backend state storage
      uses: Azure/cli@v1.0.6
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        # azcliversion: 2.34.1 # optional, default is agentazcliversion
        inlineScript: |
          az version

          # Create resource group
          az group create --name $RESOURCE_GROUP_NAME --location $RESOURCE_GROUP_LOCATION
          
          # Create storage account
          az storage account create --name $STORAGE_ACCOUNT_NAME \
             --resource-group $RESOURCE_GROUP_NAME \
             --sku Standard_LRS \
             --encryption-services blob
          
          # Create blob container
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME
          
          # generate backend.tf file
          cd $WORKING_DIRECTORY
          cat <<EOT > backend.tf
          terraform {
            backend "azurerm" {
              resource_group_name   = "$RESOURCE_GROUP_NAME"
              storage_account_name  = "$STORAGE_ACCOUNT_NAME"
              container_name        = "$CONTAINER_NAME"
              key                   = "$BLOB_NAME"
            }
          }
          EOT
          
          cat backend.tf

    # Install the latest version of Terraform CLI
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.7
    
    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        # Initialize a new or existing Terraform working directory by creating initial files, 
        # loading any remote state, downloading modules, etc.
        terraform init
        
        # Either use the backend.tf file with the config inside or use the following command line
        # terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
        #                -backend-config="container_name=$CONTAINER_NAME" \
        #                -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"


    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color 

    # On push to main, build or change infrastructure according to Terraform configuration files
    # Technique 1: Environment Variables https://blog.gruntwork.io/a-comprehensive-guide-to-managing-secrets-in-your-terraform-code-1d586955ace1#4df5
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve
